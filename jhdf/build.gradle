/*
 * This file is part of jHDF. A pure Java library for accessing HDF5 files.
 *
 * http://jhdf.io
 *
 * Copyright (c) 2020 James Mudd
 *
 * MIT License see 'LICENSE' file
 */

/*
 * Gradle build file for jHDF
 */
plugins {
    // Core plugins
    id 'java-library'
    id 'jacoco' // Code coverage
    id 'maven-publish' // For the artifact collections to publish
    id 'signing' // For GPG signing artifacts
    id 'checkstyle' // Code style checks

    // Community plugins (need versions)
    id 'com.jfrog.bintray' version '1.8.5' // For publishing to Bintray
    id 'org.sonarqube' version '3.0' // Code quality
    id "com.github.spotbugs" version "4.5.1" // Static analysis
}

// Variables
group = 'io.jhdf'
version = '0.5.9'

compileJava {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
    options.encoding = "UTF-8"
}

compileTestJava {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
    options.encoding = "UTF-8"
}

repositories {
    jcenter()
}

ext {
    slf4jVersion = '1.7.30'
    junitVersion = '5.6.2'
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'

    // Use JUnit 5 test framework
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junitVersion
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
    testRuntimeOnly group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion

    // Mocking
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.5.13'
    testImplementation group: 'org.powermock', name: 'powermock-core', version: '2.0.7'
    // Matchers
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

def getGitHash = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--verify', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Exception e) {
        e.printStackTrace()
        // Can happen if git is unavailable
        return "UNAVALIABLE"
    }
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Automatic-Module-Name': 'io.jhdf',
                // OSGi headers
                'Bundle-ManifestVersion': '2',
                'Bundle-SymbolicName': 'io.jhdf',
                'Bundle-Name': project.name,
                'Bundle-Vendor': 'James Mudd',
                'Export-Package': 'io.jhdf.*',
                // Build data
                'Build-Time': new Date().toTimestamp(),
                'Build-JDK': System.getProperty('java.vendor') + ' ' + System.getProperty('java.version'),
                'Build-OS': System.getProperty('os.name') + ' ' + System.getProperty('os.version'),
                'Git-Commit': getGitHash()
        )
        exclude('io/jhdf/examples')
    }
    from('../CHANGES.md')
    from('../LICENSE')
}

jacocoTestReport {
    reports {
        // Enable XML for Azure pipelines
        xml.enabled true
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'jhdf'
                description = 'A pure Java HDF5 library'
                url = 'http://jhdf.io/'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'jamesmudd'
                        name = 'James Mudd'
                        email = 'james.mudd@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/jamesmudd/jhdf.git'
                    developerConnection = 'scm:git:git://github.com/jamesmudd/jhdf.git'
                    url = 'https://github.com/jamesmudd/jhdf.git'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'GitHub'
            url = 'https://maven.pkg.github.com/jamesmudd/jhdf'
            credentials {
                username = 'jamesmudd'
                password = System.getenv('GITHUB_TOKEN')
            }
        }
    }
}

signing {
    sign publishing.publications.maven
}

bintray {
    user = 'jamesmudd'
    key = System.getenv('BINTRAY_KEY')
    pkg {
        repo = 'jhdf'
        name = 'jhdf'
        userOrg = 'jamesmudd'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/jamesmudd/jhdf.git'
        version {
            name = project.version
            desc = 'jHDF'
            released = new Date()
        }
    }
    // Upload the 'maven' publication i.e jar, sourcesJar, javadocJar, POM
    publications = ['maven']
    // Use filesSpec to copy the signatures not sure this is the best way but it works
    filesSpec {
        from "$buildDir/libs", "$buildDir/publications/maven/pom-default.xml.asc"
        include "*.asc" // Signature files
        into "io/jhdf/jhdf/${project.version}"
        rename 'pom-default.xml.asc', "jhdf-${project.version}.pom.asc"
    }

}

spotbugs {
    ignoreFailures = true // Allow build to continue with errors
    effort = "max"
    reportLevel = "low" // Report all issues even low priority
    reportsDir = file("$buildDir/reports/spotbugs")
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "jamesmudd-github"
        property "sonar.projectKey", "jamesmudd_jhdf"
        // Exclusions
        property "sonar.exclusions", "src/main/java/io/jhdf/examples"
        // Spotbugs
        property "sonar.java.spotbugs.reportPaths", "build/reports/spotbugs/main.xml,build/reports/spotbugs/test.xml"
        property "sonar.jacoco.reportPath", null
        property "sonar.jacoco.reportPaths", null
        // Coverage
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        // Checkstyle
        property "sonar.java.checkstyle.reportPaths", "build/reports/checkstyle/main.xml,build/reports/checkstyle/test.xml"
    }
}
